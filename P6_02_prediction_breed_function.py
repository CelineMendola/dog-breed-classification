# -*- coding: utf-8 -*-
"""prediction_breed_function.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VOfpfdTgpcIfLgCq7bFcVoCL2JEgr27j
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from skimage.io import imread, imshow 
from skimage.transform import resize
import seaborn as sns
import random
import os
import sys
import shutil
#import splitfolders
import time

from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Dropout, GlobalAveragePooling2D
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelEncoder
from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img
from tensorflow.keras import regularizers, Input, Model
from tensorflow.keras.applications import vgg16, resnet50

#Load model
model=load_model('/content/drive/MyDrive/projet6/my_model.h5')

#Define function
def predict_breed(path, model=model):
  '''Display image of the input path, returns the most probable breed predicted
  by the model and the associated probability '''
  #define breeds_list
  main_breeds_list = [
                      'maltese_dog',
                      'afghan_hound',
                      'scottish_deerhound',
                      'pomeranian',
                      'bernese_mountain_dog',
                      'samoyed',
                      'irish_wolfhound',
                      'shih_tzu',
                      'great_pyrenees',
                      'leonberg',
                      'basenji',
                      'tibetan_terrier',
                      'airedale',
                      'sealyham_terrier',
                      'entlebucher',
                      'pug',
                      'saluki',
                      'cairn',
                      'lakeland_terrier',
                      'papillon'
                      ]
  
  #Load resize and preprocess picture
  img0 = load_img(path, target_size=(224,224))
  img1 = img_to_array(img0)
  img1 = np.expand_dims(img1, axis=0)
  img1 = resnet50.preprocess_input(img1)
  #show image
  plt.imshow(img0)
  #make prediction
  predictions = model.predict(img1)

  return main_breeds_list[np.argmax(predictions)] , np.round(np.max(predictions),3)

#Appy function on an example
predict_breed('/content/drive/MyDrive/projet6/data/mainImages/great_pyrenees/n02111500_1048.jpg')

